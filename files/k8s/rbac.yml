---
apiVersion: v1
kind: Namespace
metadata:
  name: innisfree
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: "innisfree"
  name: innisfree-account
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: innisfree-role-cluster
  namespace: "innisfree"
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [innisfreetunnels.ruin.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, get]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [innisfreetunnels.ruin.dev]
    resources: [innisfrees]
    verbs: [list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  namespace: "innisfree"
  name: innisfree-role-namespaced
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [innisfreetunnels.ruin.dev]
    resources: [kopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [events.k8s.io]
    resources: [events]
    verbs: [create]
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [innisfreetunnels.ruin.dev]
    resources: [innisfrees]
    verbs: [list, watch, patch]

  # Application: other resources it produces and manipulates.
  # Here, we create Jobs+PVCs+Pods, but we do not patch/update/delete them ever.
  - apiGroups: [batch, extensions]
    resources: [jobs]
    verbs: [create]
  - apiGroups: [""]
    resources: [pods, persistentvolumeclaims]
    verbs: [create]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: innisfree-rolebinding-cluster
  namespace: "innisfree"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: innisfree-role-cluster
subjects:
  - kind: ServiceAccount
    name: innisfree-account
    namespace: "innisfree"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  namespace: "innisfree"
  name: innisfree-rolebinding-namespaced
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: innisfree-role-namespaced
subjects:
  - kind: ServiceAccount
    name: innisfree-account
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: innisfree-controller
  namespace: innisfree
spec:
  replicas: 1
  selector:
    matchLabels:
      app: innisfree
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: innisfree
    spec:
      imagePullSecrets:
      - name: docker-registry-creds
      containers:
      - name: innisfree
        image: docker.ruin.dev/innisfree:latest
        imagePullPolicy: Always
        command:
          - /usr/bin/innisfree
          - "--operator"
        env:
        - name: DIGITALOCEAN_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: innisfree-config
              key: digitalocean_api_token
        - name: DIGITALOCEAN_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: innisfree-config
              key: digitalocean_api_token
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
